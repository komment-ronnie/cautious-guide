[
  {
    "name": "test.js",
    "path": "test.js",
    "content": {
      "structured": {
        "description": "A WebGL-based implementation of a cryptocurrency miner for the Bitcoin protocol. It creates a canvas element and uses it to render a GPU-accelerated hash function evaluation process. The miner reads shaders from external scripts and compiles them into GLSL programs, which are then used to perform calculations on an array buffer.",
        "items": [
          {
            "id": "dab0100b-1d8b-81ac-9440-09772e67e2e6",
            "ancestors": [],
            "description": "Throws an exception when a WebGL error occurs during execution of a specified function, providing information about the error and the function that caused it.",
            "params": [
              {
                "name": "err",
                "optional": false,
                "type_name": "GLenum",
                "description": "An error code from WebGL."
              },
              {
                "name": "funcName",
                "optional": false,
                "type_name": "string",
                "description": "Intended to specify the name of the WebGL API function that caused the error."
              },
              {
                "name": "args",
                "optional": false,
                "type_name": "Array",
                "description": "Optional."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "webglContext.getExtension('WEBGL_debug_renderer_info').getExtension();\nthrowOnGLError(err, 'getExtension', ['WEBGL_debug_renderer_info']);\n",
              "description": ""
            },
            "name": "throwOnGLError",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "aef8f9ce-6e03-3f91-0a43-102fb6e5ed43",
            "ancestors": [],
            "description": "Initializes a WebGL context and sets up shaders for a program that appears to be implementing a cryptographic hash function using the WebGL rendering pipeline. It also sets uniforms for various parameters used by the shader.",
            "params": [
              {
                "name": "threads",
                "optional": false,
                "type_name": "number",
                "description": "Used to set the width of the canvas."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "meinWebGLStart(1024);\n",
              "description": "\nThis will create a WebGL context with a specified width."
            },
            "name": "meinWebGLStart",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "158bb0d0-b74b-f4a2-4a45-29d3d18dcf23",
            "ancestors": [],
            "description": "Requests a specified URL using an XMLHttpRequest object and sends a GET request to retrieve the contents of the file at that location. Upon completion, it calls the provided callback function with the received text response.",
            "params": [
              {
                "name": "n",
                "optional": false,
                "type_name": "string",
                "description": "URL to be read by the XMLHttpRequest object."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "any",
                "description": "Invoked with the response text as an argument."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "readScript('script.js', function(data) {\n    eval(data);\n});\n",
              "description": ""
            },
            "name": "readScript",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "2563016f-d250-a19e-1d45-e0a882160aef",
            "ancestors": [],
            "description": "Reads and retrieves the contents of two JavaScript files, 'shader-vs.js' and 'shader-fs.js', and assigns them to variables `vShaderQuellcode` and `fShaderQuellcode`, respectively.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "onl();\n",
              "description": "\nIt simply calls the function, which reads scripts and assigns their content to variables."
            },
            "name": "onl",
            "location": {
              "start": 141,
              "insert": 141,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "7f7452e2-6483-cfba-ec43-6d6343b39703",
            "ancestors": [
              "2563016f-d250-a19e-1d45-e0a882160aef"
            ],
            "description": "Reads and executes a shader program from a file.",
            "name": null,
            "location": {
              "start": 142,
              "insert": 143,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3dbb736e-8516-869a-d044-aefa44c79765",
            "ancestors": [
              "2563016f-d250-a19e-1d45-e0a882160aef"
            ],
            "description": "Reads and sets shader source code.",
            "name": null,
            "location": {
              "start": 146,
              "insert": 147,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "555c15b8-9409-06a6-3346-9c0e191bd989",
            "ancestors": [],
            "description": "Implements a GPU-based cryptocurrency mining algorithm using WebGL and JavaScript. It submits nonces to the mining pool, checks for golden hashes, and reports progress periodically. The function uses WebGL to perform pixel comparisons and hash calculations on the GPU.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to control the mining process."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Used to notify when a new hash is found."
              }
            ],
            "returns": {
              "type_name": "Function",
              "description": "Returned by the inner function `mine`. This mine function is responsible for performing the actual mining operation and returns the result back to the callback provided."
            },
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    data: [1,2,3],\n    target: [4,5,6]\n};\n\nglminer(job, function(job) {\n    if (job.golden_ticket) {\n        // The hash was successful, use it\n    }\n});\n",
              "description": ""
            },
            "name": "glminer",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 140,
            "docLength": null
          },
          {
            "id": "43fa0b64-8ba1-21ad-ba43-bd34b85b1f17",
            "ancestors": [
              "555c15b8-9409-06a6-3346-9c0e191bd989"
            ],
            "description": "Runs a job in parallel and checks for hash matches. It submits hashes that match the condition to a callback, updates the total hashes, and reports periodically.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to store temporary data for mining computations."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Called with an updated job object."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    nonce: 0,\n    t: Date.now(),\n    half: [1,2],\n    data: [3,4]\n};\nnext_run(job, function(job) {\n    // code to handle job result\n});\n",
              "description": "\n"
            },
            "name": "next_run",
            "location": {
              "start": 154,
              "insert": 154,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "7841e854-c102-d28b-264c-8df2d677eec9",
            "ancestors": [
              "555c15b8-9409-06a6-3346-9c0e191bd989",
              "43fa0b64-8ba1-21ad-ba43-bd34b85b1f17"
            ],
            "description": "Converts a nonce value to a hexadecimal array and updates a job object with new values. It then combines the updated job data with another array and converts it into a string, which is assigned as a golden ticket for the job.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "var job = {nonce: '123456', half: [1,2], data: [3,4]};\nsubmit_nonce(job, function(job) {\n    // process job.golden_ticket\n});\n",
              "description": "\n\nNote: This example illustrates how to call the submit_nonce() function with a job object and a callback function."
            },
            "name": "submit_nonce",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          },
          {
            "id": "83ef497f-e93b-f296-0f4a-1b0baa73bce6",
            "ancestors": [
              "555c15b8-9409-06a6-3346-9c0e191bd989",
              "43fa0b64-8ba1-21ad-ba43-bd34b85b1f17"
            ],
            "description": "Executes the `next_run` function with two arguments: `job` and `callback`. This is likely a wrapper for scheduling or running a job asynchronously, where `job` represents the task to be executed and `callback` is a function called after the job has completed.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "c(function(job) {\n    // job processing logic here\n}, function(err, result) {\n    if (err) {\n        // handle error\n    } else {\n        // process result\n    }\n});\n",
              "description": ""
            },
            "name": "c",
            "location": {
              "start": 249,
              "insert": 249,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0d8b1b60-b9a6-a2a1-1742-2732ea57a0c8",
            "ancestors": [
              "555c15b8-9409-06a6-3346-9c0e191bd989"
            ],
            "description": "Checks if an event object contains a `data` property with a `run` property. If either property is missing or falsy, it sets a global variable `run` to `false`, logs a message to the console, and exits the function without further execution.",
            "params": [
              {
                "name": "event",
                "optional": false,
                "type_name": "object",
                "description": "Likely an event emitted from another part of the program."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "worker.postMessage({run: true});\n",
              "description": "\n"
            },
            "name": "intMessage",
            "location": {
              "start": 257,
              "insert": 257,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "81f9dca6-5964-80aa-ed42-70c3cce1439a",
            "ancestors": [
              "555c15b8-9409-06a6-3346-9c0e191bd989"
            ],
            "description": "Sets uniform values for a WebGL context based on input data and hashes, initializes a buffer with a specified size, and calls the `next_run` function to initiate a mining process.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to configure uniform variables."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Called after the mining process is completed."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "Referred to as `intMessage`."
            },
            "usage": {
              "language": "javascript",
              "code": "mine({\n    data: [...],\n    hash1: [...],\n    midstate: [...],\n    target: [...]\n}, function(intMessage) {\n    // process intMessage here\n});\n",
              "description": ""
            },
            "name": "mine",
            "location": {
              "start": 265,
              "insert": 265,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "d94cf146-179e-99ba-ff4c-c7223c119c9e",
            "ancestors": [
              "555c15b8-9409-06a6-3346-9c0e191bd989"
            ],
            "description": "Checks whether a given hash is golden by comparing it to a target value. It converts both hash and target values to unsigned integers, then returns true if the hash is less than or equal to the target, indicating that the hash meets the \"golden\" condition.",
            "params": [
              {
                "name": "hash",
                "optional": false,
                "type_name": "string",
                "description": "32 bytes long."
              },
              {
                "name": "target",
                "optional": false,
                "type_name": "(number|string)[]",
                "description": "8 bytes long, representing a target value for hash comparison."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True if the comparison between two unsigned integers is true and false otherwise."
            },
            "usage": {
              "language": "javascript",
              "code": "var hash = \"0x12345678901234567890123456789012\";\nvar target = \"0x00000000000000000000000000000000\";\n\nvar result = is_golden_hash(hash, target);\n",
              "description": ""
            },
            "name": "is_golden_hash",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  }
]