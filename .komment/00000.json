[
  {
    "name": "test.js",
    "path": "test.js",
    "content": {
      "structured": {
        "description": "And uses a class called \"Employee\". The class has attributes such as id, name, age, and salary. It also contains methods like calculateBonus and displayEmployeeDetails.",
        "items": [
          {
            "id": "531bc7de-e5c0-fa84-e84c-ed3dbb0c8785",
            "ancestors": [],
            "description": "Throws an error when a WebGL-related error (`err`) occurs, specifying the error type and the name of the function that caused it (`funcName`). It is called internally to handle errors during WebGL operations.",
            "params": [
              {
                "name": "err",
                "optional": false,
                "type_name": "GLenum",
                "description": "Intended to represent an error code from WebGL API."
              },
              {
                "name": "funcName",
                "optional": false,
                "type_name": "string",
                "description": "Used to specify the name of the WebGL function that caused the error."
              },
              {
                "name": "args",
                "optional": false,
                "type_name": "any[]",
                "description": "Used to specify additional error context."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "try {\n  gl.getExtension('EXT_debug_renderer');\n} catch (err) {\n  throwOnGLError(err, 'getExtension', ['EXT_debug_renderer']);\n}\n",
              "description": ""
            },
            "name": "throwOnGLError",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f3c91fe8-5f27-b2af-5242-5de0474867c2",
            "ancestors": [],
            "description": "Initializes a WebGL context and creates a program with vertex and fragment shaders. It sets up attributes for vertices and uniforms for hash values and other parameters. This is likely part of an implementation of a cryptographic algorithm, specifically the Keccak hash function.",
            "params": [
              {
                "name": "threads",
                "optional": false,
                "type_name": "number",
                "description": "Used to set the width of the WebGL canvas."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "// Create canvas\nvar canvas = meinWebGLStart(1024);\ndocument.body.appendChild(canvas);\n\n// Use the created WebGL context\ngl.clear(gl.COLOR_BUFFER_BIT);\n",
              "description": "\n\nThis example creates a new WebGL canvas of size 1024x1 and then uses it to clear its color buffer."
            },
            "name": "meinWebGLStart",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "3cc2aa2c-7e09-ab91-d548-5d6604da3f0e",
            "ancestors": [],
            "description": "Requests a file at URL `n` using XMLHttpRequest and retrieves its contents as a string. Once the request is completed, it invokes the provided `callback` function with the response text as an argument. This allows the caller to process or use the script content as needed.",
            "params": [
              {
                "name": "n",
                "optional": false,
                "type_name": "string",
                "description": "URL path or file name for loading script content."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Called with the script's response text as an argument."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "readScript(\"script.js\", function (response) {\n    console = document.getElementById('console');\n    console.innerHTML += response;\n});\n",
              "description": ""
            },
            "name": "readScript",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "5efef1e3-0741-328e-9a4d-9d9448c5ea13",
            "ancestors": [],
            "description": "Reads two shader scripts, 'shader-vs.js' and 'shader-fs.js', and stores their contents in variables `vShaderQuellcode` and `fShaderQuellcode`, respectively.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "onl();\n\n// The vShaderQuellcode and fShaderQuellcode variables are now populated.",
              "description": ""
            },
            "name": "onl",
            "location": {
              "start": 141,
              "insert": 141,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "6d20a31e-b144-c99a-6049-f470af63645d",
            "ancestors": [
              "5efef1e3-0741-328e-9a4d-9d9448c5ea13"
            ],
            "description": "Reads and executes the content of a file named 'shader-vs.js'.",
            "name": null,
            "location": {
              "start": 142,
              "insert": 143,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "640f7c74-b590-53b8-fd46-ca1e82b53bb6",
            "ancestors": [
              "5efef1e3-0741-328e-9a4d-9d9448c5ea13"
            ],
            "description": "Loads and executes a shader script from 'shader-fs.js' file, storing its output as `fShaderQuellcode`.",
            "name": null,
            "location": {
              "start": 146,
              "insert": 147,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "48ea9bfd-87c3-9880-7144-292ca2b1e096",
            "ancestors": [],
            "description": "Mines for a specific hash by iterating over pixels on a canvas and checking each pixel's value against a target value. If a match is found, it submits the nonce and updates the golden ticket. It also handles timeouts and reports progress periodically.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to hold mining data."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Called to report job status or notify of new nonce found."
              }
            ],
            "returns": {
              "type_name": "Function",
              "description": "The `mine` function itself, allowing for method chaining and reuse within the context of the `derMiner` object."
            },
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    t: undefined,\n    nonce: 0,\n    half: [1, 2, 3],\n    data: [4, 5, 6]\n};\n\nvar callback = function(job) {\n    // handle result\n};\n\nglminer(job, callback);",
              "description": ""
            },
            "name": "glminer",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 140,
            "docLength": null
          },
          {
            "id": "405351c5-c769-a2bf-da40-939a9ea76766",
            "ancestors": [
              "48ea9bfd-87c3-9880-7144-292ca2b1e096"
            ],
            "description": "Runs a proof-of-work algorithm for a given job and callback. It iterates through pixel data, checking for nonce values that satisfy certain conditions. When a valid nonce is found, it submits the result to the callback and updates the job's state.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Intended to hold miner job data."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "any",
                "description": "Called to notify the user about the job's progress or completion."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    t: null,\n    nonce: 0,\n    data: [1, 2, 3],\n    half: [4, 5, 6]\n};\n\nnext_run(job, function(result) {\n    if (result != null)\n        // do something with the result\n});",
              "description": ""
            },
            "name": "next_run",
            "location": {
              "start": 154,
              "insert": 154,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "a695ff10-7fe9-009c-4d47-39508fc41b47",
            "ancestors": [
              "48ea9bfd-87c3-9880-7144-292ca2b1e096",
              "405351c5-c769-a2bf-da40-939a9ea76766"
            ],
            "description": "Takes a job object as input and generates a golden ticket based on its nonce, data, and half values. It then calls the provided callback with the updated job object containing the generated golden ticket.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "submit_nonce({\n    half: [\"a\", \"b\"],\n    data: [1, 2],\n    callback: function(job) {\n        // handle job.golden_ticket\n    }\n});\n",
              "description": ""
            },
            "name": "submit_nonce",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          },
          {
            "id": "ee14f765-f864-f191-c949-d378b159a793",
            "ancestors": [
              "48ea9bfd-87c3-9880-7144-292ca2b1e096",
              "405351c5-c769-a2bf-da40-939a9ea76766"
            ],
            "description": "Defines a closure that calls the `next_run` function with the provided `job` and `callback`. This allows for delayed execution or queuing of the job, with the callback being notified when the job is complete.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "c(nextJob, function(result) {\n    processResult(result);\n});\n",
              "description": ""
            },
            "name": "c",
            "location": {
              "start": 249,
              "insert": 249,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b49a9ad2-29ac-2fa0-ed46-57ab235f7577",
            "ancestors": [
              "48ea9bfd-87c3-9880-7144-292ca2b1e096"
            ],
            "description": "Checks if an event object contains valid data and a `run` property. If not, it sets `run` to false, logs \"worker: forced quit!\", and exits without performing any further actions.",
            "params": [
              {
                "name": "event",
                "optional": false,
                "type_name": "object",
                "description": "Expected to contain data about an event."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var event = {data: {run: true}};\nintMessage(event);\n",
              "description": "\n\nThis code will execute and handle the message as per the function's definition."
            },
            "name": "intMessage",
            "location": {
              "start": 257,
              "insert": 257,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "2c3a546e-56cb-97b5-344c-2a523c030415",
            "ancestors": [
              "48ea9bfd-87c3-9880-7144-292ca2b1e096"
            ],
            "description": "Sets uniform variables for a WebGL program and initializes a buffer. It then calls the `next_run` function with the provided job and callback, returning an integer message. The function appears to be part of a miner application, processing jobs and generating output.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to pass data for rendering."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Called after completing the job processing, passing any result as an argument."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "Referred to as `intMessage`."
            },
            "usage": {
              "language": "javascript",
              "code": "var job = {\n  data: [1, 2, 3],\n  hash1: [4, 5, 6],\n  midstate: [7, 8, 9],\n  target: [10, 11, 12]\n};\n\nmine(job, function(result) {\n  // process result\n});\n",
              "description": ""
            },
            "name": "mine",
            "location": {
              "start": 265,
              "insert": 265,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "a93b9d46-47ea-148c-d044-a3ecd955f696",
            "ancestors": [
              "48ea9bfd-87c3-9880-7144-292ca2b1e096"
            ],
            "description": "Checks if a given hash value is within or equal to a target value, represented as hexadecimal strings. It converts both values to unsigned integers, compares them, and returns a boolean indicating whether the hash is golden (i.e., less than or equal to the target).",
            "params": [
              {
                "name": "hash",
                "optional": false,
                "type_name": "string",
                "description": "Expected to be a hash value."
              },
              {
                "name": "target",
                "optional": false,
                "type_name": "(number)[]",
                "description": "7 elements long. It is used to compare hash values with."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True if the comparison between two unsigned integers is satisfied and false otherwise."
            },
            "usage": {
              "language": "javascript",
              "code": "var hash = \"0x12345678\";\nvar target = [\"0xf0\", \"0x0\"];\n\nif (is_golden_hash(hash, target)) {\n    // logic for golden hash\n}",
              "description": ""
            },
            "name": "is_golden_hash",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  }
]