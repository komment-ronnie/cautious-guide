[
  {
    "name": "test.js",
    "path": "test.js",
    "content": {
      "structured": {
        "description": "A WebGL-based implementation of a proof-of-work (PoW) miner for cryptocurrency mining. The miner utilizes shaders and buffers to perform computations on a canvas element in a browser environment. The code initializes WebGL context, compiles shaders, and sets up uniform variables to pass data to the shaders. It also provides functions for reading shader scripts and executing the PoW algorithm.",
        "items": [
          {
            "id": "1f949b1c-3992-62a2-1d46-5ca1f4e03ae8",
            "ancestors": [],
            "description": "Throws an exception when a WebGL error occurs, specifying the error code and the name of the function that triggered the error. This allows debugging of errors caused by incorrect WebGL usage.",
            "params": [
              {
                "name": "err",
                "optional": false,
                "type_name": "GLenum",
                "description": "Error code from WebGL's underlying OpenGL context."
              },
              {
                "name": "funcName",
                "optional": false,
                "type_name": "string",
                "description": "Specified to indicate the name of the WebGL function that triggered the error."
              },
              {
                "name": "args",
                "optional": false,
                "type_name": "any[]",
                "description": "Used to provide additional context."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "webglContext.getExtension(\"WEBGL_debug_renderer_info\");\nthrowOnGLError(webglContext.getError(), \"getExtension\", []);\n",
              "description": ""
            },
            "name": "throwOnGLError",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e791ef7d-df21-1899-5642-a2f92020721e",
            "ancestors": [],
            "description": "Initializes a WebGL context and sets up a basic graphics pipeline for rendering a simple shape. It defines two shaders (vertex and fragment), compiles them, and links them to a program. The function also sets uniform variables for the hash functions.",
            "params": [
              {
                "name": "threads",
                "optional": false,
                "type_name": "number",
                "description": "Used to set the canvas width."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "meinWebGLStart(1024);\ncanvas.addEventListener(\"webglcontextlost\", function (event) {\n    event.preventDefault();\n});\n",
              "description": ""
            },
            "name": "meinWebGLStart",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "cffcf587-2bc3-d58d-f540-f7b75762c0e9",
            "ancestors": [],
            "description": "Sends a GET request to the specified URL using an XMLHttpRequest object. When the response is received, it calls the provided callback function with the response text as an argument. The function reads and returns the contents of the script file at the specified URL.",
            "params": [
              {
                "name": "n",
                "optional": false,
                "type_name": "string",
                "description": "URL to retrieve a script from."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "any",
                "description": "Invoked with the response text from an AJAX request."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "readScript('script.txt', function(data) {\n    processScriptData(data);\n});\n",
              "description": ""
            },
            "name": "readScript",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "60783654-45aa-d7a9-bf46-a70ba0ae8648",
            "ancestors": [],
            "description": "Loads two scripts, 'shader-vs.js' and 'shader-fs.js', asynchronously. The loaded script contents are stored in variables `vShaderQuellcode` and `fShaderQuellcode`, respectively.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "onl();\n// Some other rendering code here...\n",
              "description": ""
            },
            "name": "onl",
            "location": {
              "start": 141,
              "insert": 141,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "53a328dd-e876-40b5-dd42-f9a3f41f102c",
            "ancestors": [
              "60783654-45aa-d7a9-bf46-a70ba0ae8648"
            ],
            "description": "Reads and executes a script.",
            "name": null,
            "location": {
              "start": 142,
              "insert": 143,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4dd86598-c571-4d83-9c45-00a009b6c40f",
            "ancestors": [
              "60783654-45aa-d7a9-bf46-a70ba0ae8648"
            ],
            "description": "Reads a file and assigns its contents to a variable.",
            "name": null,
            "location": {
              "start": 146,
              "insert": 147,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "93a78650-eaa5-648c-9e43-b4e53943b742",
            "ancestors": [],
            "description": "Mines for cryptocurrency using a GPU-based miner. It renders pixels on the canvas, reads pixel data, and checks for golden hashes. The function submits valid hashes to the callback function and reports periodic statistics.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to describe a mining job for cryptocurrency."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "any",
                "description": "Used to notify when a golden ticket has been found or after a certain period of time has passed."
              }
            ],
            "returns": {
              "type_name": "Function",
              "description": "`mine`. The `mine` function represents the entry point for mining and schedules subsequent runs based on job parameters."
            },
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    t: 0,\n    nonce: 0,\n    data: [1, 2],\n    half: [3, 4]\n};\nglminer(job, function(job) {\n    // callback function\n});\n",
              "description": ""
            },
            "name": "glminer",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 140,
            "docLength": null
          },
          {
            "id": "45ffa602-8fe5-3faa-0f41-cd61f5d16ffe",
            "ancestors": [
              "93a78650-eaa5-648c-9e43-b4e53943b742"
            ],
            "description": "Runs a job to mine for hashes using WebGL and submits nonce values that match certain conditions. It iterates through pixel data, checks for matches, and calls the callback with updated job information at regular intervals or when a timeout occurs.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to pass data for computation."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Used to notify of job completion."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var job = { t: new Date().getTime(), nonce: 0 };\nnext_run(job, function(job) {\n    // do something with job\n});\n",
              "description": ""
            },
            "name": "next_run",
            "location": {
              "start": 154,
              "insert": 154,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "dc34922c-fc0c-ebae-fe43-b4dae463c4cd",
            "ancestors": [
              "93a78650-eaa5-648c-9e43-b4e53943b742",
              "45ffa602-8fe5-3faa-0f41-cd61f5d16ffe"
            ],
            "description": "Processes a miner job by converting the nonce to a uint16 array, updating the job data, concatenating half and full data arrays into a single array, encoding the result as a pool string, and finally assigning it to the job's golden ticket property before invoking the callback.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    half: [1, 2, 3],\n    data: [4, 5, 6]\n};\n\nsubmit_nonce(job, function(j) {\n    // handle the processed job\n});\n",
              "description": "\nPasses a `job` object to the `submit_nonce` function and supplies a callback function."
            },
            "name": "submit_nonce",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          },
          {
            "id": "ea0f05f9-20e2-7bb6-8247-51e799e9fdc6",
            "ancestors": [
              "93a78650-eaa5-648c-9e43-b4e53943b742",
              "45ffa602-8fe5-3faa-0f41-cd61f5d16ffe"
            ],
            "description": "Invokes the `next_run` function with two arguments: `job` and `callback`. The purpose is to trigger the execution of a job with a specified callback function, which will be executed after the job completes its processing.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "c(job, function(result) {\n    doSomethingWithResult(result);\n});\n",
              "description": "\nRun."
            },
            "name": "c",
            "location": {
              "start": 249,
              "insert": 249,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "48045064-5280-6c81-f849-ac9d974a2aa7",
            "ancestors": [
              "93a78650-eaa5-648c-9e43-b4e53943b742"
            ],
            "description": "Monitors incoming events, verifying if they contain a `data` property and a `run` property with truthy value. If not, it sets `run` to false and logs \"worker: forced quit!\" to the console, then terminates execution.",
            "params": [
              {
                "name": "event",
                "optional": false,
                "type_name": "Event",
                "description": "Used to receive messages from the worker."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var event = {data: {run: true}};\nintMessage(event);\n",
              "description": ""
            },
            "name": "intMessage",
            "location": {
              "start": 257,
              "insert": 257,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bff27143-e372-9c95-2341-1d5f6bb9a876",
            "ancestors": [
              "93a78650-eaa5-648c-9e43-b4e53943b742"
            ],
            "description": "Initializes uniform variables for a WebGL context and sets data from a `job` object. It also creates a Uint8Array buffer for rendering, calls the `next_run` function with the job, and returns an integer message.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to pass data to the WebGL context."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Awaited by `next_run`."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "`intMessage`."
            },
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    data: [1, 2],\n    hash1: [3, 4],\n    midstate: [5, 6],\n    target: [7, 8]\n};\nmine(job, function(intMessage) {\n    // Process the intMessage\n});",
              "description": ""
            },
            "name": "mine",
            "location": {
              "start": 265,
              "insert": 265,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6590e49b-bdcd-64aa-e947-e308a24a4cd8",
            "ancestors": [
              "93a78650-eaa5-648c-9e43-b4e53943b742"
            ],
            "description": "Determines whether a given hash is valid based on a target value. It converts both the hash and the target's 6th byte to unsigned integers, then checks if the hash value is less than or equal to the target value.",
            "params": [
              {
                "name": "hash",
                "optional": false,
                "type_name": "string",
                "description": "32 bytes long."
              },
              {
                "name": "target",
                "optional": false,
                "type_name": "string",
                "description": "8 bytes long."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True if the unsigned integer generated from `hash` is less than or equal to the unsigned integer generated from the last six characters of `target`, and false otherwise."
            },
            "usage": {
              "language": "javascript",
              "code": "var hash = \"some_hash\";\nvar target = \"some_target\";\nif (is_golden_hash(hash, target)) {\n    alert(\"Hash is golden!\");\n}\n",
              "description": ""
            },
            "name": "is_golden_hash",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  }
]